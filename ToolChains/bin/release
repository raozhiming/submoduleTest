#!/usr/bin/env python3

import os
import sys
import subprocess
import argparse
import distutils.dir_util as dir_util
import textwrap
import timeit
import json
from collections import OrderedDict

parser = argparse.ArgumentParser(description='For Trinity release',
                                 formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('target', metavar='TARGET', choices=['all', 'build', 'incversion', 'push', 'tag', 'update'],
                    help=textwrap.dedent('''\
                         Specify the target to build.
                         all: build all module: launcher, dapp, runtime;
                         build: build launcher, runtime;
                         incversion: add version for launcher runtime dapps;
                         push: push change;
                         tag: add tag for trinity and all submodules;
                         update: update code.
                     '''))
args = parser.parse_args()


SCRIPT_PATH=os.path.realpath(__file__)
TOOLCHAINS_DIR_PATH=os.path.dirname(os.path.dirname(SCRIPT_PATH))
TOOLCHAINS_DIR_NAME=os.path.basename(TOOLCHAINS_DIR_PATH)
PROJECT_DIR_PATH=os.path.join(TOOLCHAINS_DIR_PATH, "..")
RUNTIME_DIR_PATH=os.path.join(PROJECT_DIR_PATH, "Runtime")
LAUNCHER_DIR_PATH=os.path.join(PROJECT_DIR_PATH, "Launcher")
DAPPS_DIR_PATH=os.path.join(PROJECT_DIR_PATH, "Dapps")
IONIC_DIR_PATH=os.path.join(DAPPS_DIR_PATH, "Ionic")


def run_cmd(cmd, ignore_error=False):
    print("Running: " + cmd)
    ret = subprocess.call(cmd, shell=True)
    if not ignore_error and ret != 0:
        sys.exit(ret)

def check_fabric():
    api_key = os.getenv("FABRIC_API_KEY");
    api_secret = os.getenv("FABRIC_API_SECRET");
    if api_key is None or api_key.strip()=="":
        print("FABRIC_API_KEY not set!")
        sys.exit(1)
    if api_secret is None or api_secret.strip()=="":
        print("FABRIC_API_SECRET not set!")
        sys.exit(1)

def update_code():
    os.chdir(PROJECT_DIR_PATH)
    # prompt
    update_code = input("Any changes in the working tree are discarded. Type 'y' to continue :")
    if update_code.lower() != 'y':
        sys.exit(1)
    run_cmd('git reset --hard')
    run_cmd("git submodule foreach git reset --hard & git checkout master")
    run_cmd('git pull --rebase')
    run_cmd('git submodule update --init --rebase')

def tag():
    # for Trinity and all submodules
    # get tag name
    tagName = input("Pls input the tag name:")
    tag_push = input("tag name is " + tagName + "\nType 'y' to tag and push :")
    if tag_push.lower() != 'y':
        sys.exit(1)

    os.chdir(PROJECT_DIR_PATH)
    cmd = "git tag %s & git push origin %s"%(tagName,tagName)
    run_cmd(cmd)
    cmd = "git submodule foreach git tag %s & git push origin %s"%(tagName,tagName)
    run_cmd(cmd)

def increase_version_manifest(manifest):
    file_in = open(manifest, "r")
    data = json.load(file_in, object_pairs_hook=OrderedDict)

    rindex = data['version'].rfind('.')
    preVersion = data['version'][0:rindex+1]
    miniVersion = data['version'][rindex+1:]
    data['version'] = preVersion + str(int(miniVersion) + 1)
    data['version_code'] += 1

    print("    version:" + str(data['version']))
    print("    version_code:" + str(data['version_code']))
    file_in.close()

    file_out = open(manifest, 'w')
    file_out.write(json.dumps(data, indent=4))
    file_out.close()

def increase_version_runtime():
    config_file = RUNTIME_DIR_PATH + "/www_files/config/preferences.json"
    file_in = open(config_file, "r")
    data = json.load(file_in, object_pairs_hook=OrderedDict)

    rindex = data['version'].rfind('.')
    preVersion = data['version'][0:rindex+1]
    miniVersion = data['version'][rindex+1:]
    data['version'] = preVersion + str(int(miniVersion) + 1)

    print("    version:" + str(data['version']))
    file_in.close()

    file_out = open(config_file, 'w')
    file_out.write(json.dumps(data, indent=4))
    file_out.close()

def push_code():
    cmd = "git add src/assets/manifest.json & git commit -m 'increase version for release' & git push"
    # run_cmd(cmd)

startTime = timeit.default_timer()

if args.target == "all" or args.target == "update":
    update_code()

if args.target == "tag":
    tag()

if args.target == "push":
    print("Runtime: ")
    os.chdir(RUNTIME_DIR_PATH)
    push_code()

    print("Launcher: ")
    os.chdir(LAUNCHER_DIR_PATH)
    push_code()

    dirs = os.listdir(IONIC_DIR_PATH)
    for dir in dirs:
        dapp_dir = os.path.join(IONIC_DIR_PATH, dir)
        if os.path.isdir(dapp_dir):
            print("Dapp push code: " + dir)
            os.chdir(dapp_dir)
            push_code()

    # Trinity repo
    os.chdir(PROJECT_DIR_PATH)
    run_cmd('git add Runtime')
    run_cmd('git add Launcher')

    dirs = os.listdir(IONIC_DIR_PATH)
    for dir in dirs:
        if os.path.isdir(dapp_dir):
            run_cmd('git add ' + dir)

    run_cmd("git commit -m 'increase version for release' & git push")

if args.target == "all" or args.target == "incversion":
    increase_version_runtime()

    print("Launcher: ")
    increase_version_manifest(LAUNCHER_DIR_PATH +'/src/assets/manifest.json')

    dirs = os.listdir(IONIC_DIR_PATH)
    for dir in dirs:
        dapp_dir = os.path.join(IONIC_DIR_PATH, dir)
        if os.path.isdir(dapp_dir):
            print("Dapp: " + dir)
            os.chdir(dapp_dir)
            increase_version_manifest(dapp_dir +'/src/assets/manifest.json')

if args.target == "all" or args.target == "build":
    os.chdir(PROJECT_DIR_PATH)
    check_fabric()
    run_cmd('./ToolChains/bin/build all --release')

elapsed = timeit.default_timer() - startTime
minutes = elapsed / 60
seconds = elapsed % 60
print('elapsed time [%d min %0.2fs]' % (minutes, seconds))
